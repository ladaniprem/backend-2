import {asyncHandler} from "../utils/asyncHandler.js";
import {ApiError} from "../utils/apiError.js";
import {User} from "../models/user.model.js";
import {uploadOnCloudinary} from "../utils/Cloudnary.js";
import { ApiResponse } from "../utils/ApiResponse.js";
const registerUser = asyncHandler(async(req,res) => {
//   res.status(200).json({
//     message:"Ladani prem",
//    })

//steps to break it 
// 1. get user details from frontend
// 2. validate the data - not empty, valid email, password length
// 3. check if user already exists: username and email
// 4. check for images,check for avatar
// 5. upload them to cloudinary, check avatar
// 6. create user object- create entry in db
// 7. remove password and refresh token field from response
// 8. check for user creation 
// 9. return response 

// postman me always not the json (row) formate nahi karna anta dhundh 
//postman me always use for the file upload karni ho to form-data use karta hai json kam nahi ata hai 


const {fullname,email,username,password}=req.body 
   console.log("email:",email);

   // if (fullname == "") {
   //    throw new ApiError(400,"fullname is required")
   // }

   if(
      [fullname,email,username,password].some((field) => {
          const trimmed = field?.trim();
     //     console.log("Field value:", trimmed); // Add console.log to check each field
          return trimmed === "";
      })
   ){
     throw new ApiError(400,"All field are required")  
   }
     
   const existedUser = await User.findOne({
      $or:[{ username },{ email }]
   })
 //  console.log("User exists check:", existedUser); // Add console.log to see findOne result

   if(existedUser){
      throw new ApiError(409,"User already exists")
   }

   const avatarLocalPath = req.files?.avatar[0]?.path;
   //console.log("Avatar path:", avatarPath); // Add console.log to check file path
  const coverImageLocalPath= req.files?.coverImage[0]?.path;
})

if (!avatarLocalPath) {
   throw new ApiError(400,"Avatar is required")
}

  const avatar = await uploadOnCloudinary(avatarLocalPath);
  const coverImage = await uploadOnCloudinary(coverImageLocalPath);

  if(!avatar){
   throw new ApiError(400,"Avatar upload failed")
  }

 const user = await User.create({
   fullname,
   avatar:avatar.url,
   coverImage:coverImage.url||"",
   email,
   password,
   username:username.tolowerCase()
  })

 const createdUser = await User.findById(user._id).select(
   "-password -refreshToken"
)

if(!createdUser){
   throw new ApiError(500,"something went wrong while creating user");
}

 res.status(201).json(
  new ApiResponse(201, createdUser, "User registered successfully")
)

export {registerUser}